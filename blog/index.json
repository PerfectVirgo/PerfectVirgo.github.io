[
    {
        "ref": "http://dongshuaizhi.top/blog/js%E6%A6%82%E8%BF%B0/",
        "title": "JS概述",
        "section": "blog",
        "tags": null,
        "date" : "2020.04.07",
        "body": "1. JavaScript 的诞生   布莱登临危受命\n公司要求给浏览器添加一个脚本功能\n公司要求这个脚本必须蹭 Java 的流量\n布莱登花十天设计了 JS 的最初版本（不是实现）\n  JS 的命名\nMocha 摩卡 =\u0026gt; LiveScript =\u0026gt; JavaScript\nJava 既是编程语言，也是一种咖啡\n浏览器一开始同时就支持 Java 和 JavaScript\n后来，JS 胜了（在浏览器上）\n  2. ECMAScript 标准的制定   时间\n1997 年 6 月，第一版 ECMAScript 发布\n1999 年 12 月，第三版发布，这个版本使用最广\n第四版，流产\n2009 年 12 月，第五版发布，增加了一些功能\n2015 年 6 月，第六版发布，新浏览器都支持这一版\n之后每年发布一版，版本号以年份命名\n  JS 与 ECMAScript 的关系\nECMAScript 是纸上的标准，JS 是浏览器的实现\n纸上标准往往落后于浏览器，先实现，再写进标准\n  3. JavaScript 的兴起   杀手级应用 Gmail\n2004 年愚人节，谷歌发布 Gmail 在线网页\n当时的人们认为网页只能用来看新闻和图片\nGmail 的发布让用户和开发者眼前一亮\n2005 年，Jesse 将谷歌用到的技术命名为 AJAX\n从此，前端技术正式出现\n在此之前的网页开发都是由后端和设计师完成\n2006 年，JQuery 发布，是目前最长寿的 JS 库\n后来的十年，JQuery 大放异彩，直到 IE 不行了，JQuery 才稍微没有那么火\n  4. JavaScript 的爆发   V8 快如闪电\nChrome 的 JS 引擎叫做 V8（V1 到 V7 是啥）\n2009 年，Ryan 基于 V8 创建了 Node.js\n2010 年，Isaac 基于 Node.js 写出了 npm\n前端工程师可以在浏览器之外执行 JS 了，Node.js 快速风靡\n同年，TJ 受 Sinatra 启发，发布了 Express.js\n从此，前端工程师可以愉快地写后端应用了\n  爆发\n这期间出来的技术太多，以后慢慢介绍：gulp、grunt、yeoman、requirejs、webpack、Angular、React、Vue 等\n这些技术很多也已经过时了\n  5. 总结   JS 是历史的选择\n一开始浏览器支持很多东西：Java、Flash、VBScript\n只有 JS 活到最后\n  JS 的低开高走\n一开始 JS 就是一个玩具语言\n但是 JS 每次都走对了风口\n  学习 JS 时需要注意\n旧的、过时的东西了解就好，考前记忆一些\n跟 IE 相关的知识一律忽略\n  "
    }
,
    {
        "ref": "http://dongshuaizhi.top/blog/%E6%B5%85%E6%9E%90url/",
        "title": "浅析URL",
        "section": "blog",
        "tags": null,
        "date" : "2020.04.06",
        "body": "1. IP   Internet Protocal主要约定了两件事：\n 如何定位一台设备 如何封装数据报文，以跟其他设备交流    只要你在互联网中，你就有至少一个独特的 IP\n  IP 分为内网和外网\n  如何获取外网 IP\n 你从电信租用带宽，一年一千多 你买了一个路由器，然后用电脑和手机分别连接路由器广播出来的无线 WIFI 只要路由器连上电信的服务器，那么路由器就会有一个【外网 IP 】，比如【14.17.32.211】就是一个外网 IP 。这就是你在互联网中的地址 但是如果你重启路由器，那么你很有【可能】被重新分配一个【外网 IP】，也就是说你的路由器没有【固定的外网 IP】 但是有个问题，你的路由器的外网 IP 如果是【14.17.32.211】，那么你的手机和电脑的 IP 又是什么呢？答案是【内网 IP】    内网 IP\n 路由器会在你家里创建一个内网，内网中的设备使用内网 IP，一般来说这个 IP 的格式都是 【192.168.xxx.xxx】 一般路由会给自己分配一个好记的内网 IP，如【192.168.1.1】 然后路由会给每一个内网中的设备分配一个不同的内网 IP，如电脑是【192.168.1.2】，手机是【192.168.1.3】，以此类推    路由器的功能\n 现在路由器有两个 IP，一个外网 IP 和一个内网 IP 内网中的设备可以互相访问，但是不能直接访问外网 内网设备想要访问外网，就必须经过路由器中转 外网中的设备可以互相访问，但是无法访问你的内网 外网设备想要把内容送到内网，也必须通过路由器 也就是说内网和外网就像两个隔绝的空间，无法互通，唯一的联通点就是路由器 所以路由器有时候也被叫做【网关】    几个特殊的 IP\n  【127.0.0.1】表示自己\n  【localhost】通过 hosts 指定为自己\n在 Windows 系统中，hosts 文件位于 C:\\Windows\\System32\\drivers\\etc\\hosts，它可 以让任何字符串变成一个对应的 IP，比如把hosts文件以管理员身份运行后添加 127.0.0.1 fuck，就可以用 fuck 来表示自己\n  【0.0.0.0】不表示任何设备\n    IP 有了，还需要什么？\n需要端口\n  2. 端口   一台机器可以提供很多服务\n每个服务一个号码，这个号码就叫端口号 port\n  一个比喻\n 麦当劳提供两个窗口，一号快餐，二号咖啡 你去快餐窗口点咖啡会被拒绝，让你去另一个窗口 你去咖啡窗口点快餐结果一样    一台机器可以提供不同服务\n 要提供 HTTP 服务最好使用 80 端口 要提供 HTTPS 服务最好使用 443 端口 要提供 FTP 服务最好使用 21 端口 一共有 65535 个端口（基本够用）    怎么知道应该用什么端口\n维基百科一个一个列出来了\n  端口使用还有什么规则\n  0 到 1023（2的10次方减1）号端口是留给系统使用的\n  你只有拥有了管理员权限后，才能使用这 1024 个端口\n  其他端口可以给普通用户使用\n  比如 http-server 默认使用 8080 端口\n如果要用其他端口呢？添加一个参数即可，$ hs -c-1 -p 1234 \n  一个端口如果被占用，你就只能换一个端口\n    总而言之\nIP 和端口缺一不可\n  3. 域名   域名就是对 IP 的别称\n  baidu.com 对应什么 IP\n$ ping baidu.com\n  qq.com 对应什么 IP\n$ ping qq.com\n  知识点\n一个域名可以对应不同 IP\n这个叫做均衡负载，防止一台机器扛不住\n一个 IP 可以对应不同域名\n这个叫做共享主机，穷开发者会这么做\n    域名和 IP 是怎么对应起来的\n通过 DNS（Domain Name System）\n  当你输入 qq.com\n  过程\n你的 Chrome 浏览器会向电信/联通提供的 DNS 服务器询问 qq.com 对应什么 IP，也可用命令$ nslookup qq.com询问\n电信/联通会回答一个 IP（具体过程很复杂，不研究）\n然后 Chrome 才会向对应 IP 的 80/443 端口发送请求\n请求内容是查看 qq.com 的首页\n  为什么是 80 或 443 端口\n服务器默认用 80 提供 http 服务\n服务器默认用 443 提供 https 服务\n你可以在开发者工具里看到具体的端口\n    题外话\n  www\nwww.baidu.com 和 baidu.com\n是同一个域名吗？不是\n  他们是什么关系\ncom 是顶级域名\nbaidu.com 是二级域名（俗称一级域名）\nwww.baidu.com 是三级域名（俗称二级域名）\n他们是父子关系\ngithub.io 把子域名 xxx.github.io 免费给你使用\n所以你应该知道 www.baidu.com 和 baidu.com 可以不是同一家公司，也可以是\nwww 是多余的吗？是的，非常多余\n    4. URL   如何请求不同的页面\n  路径可以做到\nhttps://developer.mozilla.org/zh-CN/docs/Web/HTML\nhttps://developer.mozilla.org/zh-CN/docs/Web/CSS\n  工具\n使用 Chrome 开发者工具 Network 面板看看区别\n    同一个页面，不同内容\n  查询参数可以做到\nhttps://www.baidu.com/s?wd=hi\nhttps://www.baidu.com/s?wd=hello\n    同一个内容，不同位置\n  锚点可以做到\nhttps://developer.mozilla.org/zh-CN/docs/Web/CSS#参考书\nhttps://developer.mozilla.org/zh-CN/docs/Web/CSS#教程\n  注意\n锚点看起来有中文，实际不支持中文\n#参考书会变成#%E5%8F%82%E8%80%83%E4%B9%A6\n锚点是无法在 Network 面板看到的\n因为锚点不会传给服务器\n    URL\n协议 + 域名或 IP + 端口号 + 路径 + 查询字符串 + 锚点\n  URL 举例\n就算没写，你也应该知道端口\nHTTPS 默认端口 443\n  5. HTTP（协议）   基于 TCP 和 IP 两个协议\n  curl 命令\n  用 curl 可以发 HTTP 请求\n$ curl -v http://baidu.com\n$ curl -s -v -- https://www.baidu.com\n  理解以下概念\nurl 会被 curl 工具重写，先请求 DNS 获得 IP\n先进行 TCP 连接，TCP 连接成功后，开始发送 HTTP 请求\n请求内容看一眼\n响应内容看一眼\n响应结束后，关闭 TCP 连接（看不出来）\n真正结束\n  HTTP\n规定请求的格式是什么，响应的格式是什么\n    "
    }
,
    {
        "ref": "http://dongshuaizhi.top/blog/css%E5%8A%A8%E7%94%BB/",
        "title": "CSS动画",
        "section": "blog",
        "tags": null,
        "date" : "2020.04.05",
        "body": "1. 动画   定义\n由许多静止的画面（帧）\n以一定的速度（如每秒30张）连续播放时\n肉眼因视觉残象产生错觉\n而误以为是活动的画面\n  概念\n帧：每个静止的画面都叫做帧\n播放速度：每秒 24 帧（影视） 或者每秒 30 帧（游戏）\n  一个最简单的例子\n  将 div 从左往右移动\n代码\n  原理\n每过一段时间（用 setInterval 做到）\n将 div 移动一小段距离\n直到移动到目标地点\n  注意性能\n绿色表示重新绘制（repaint）了\nCSS 渲染过程依次包含布局、绘制、合成\n其中布局和绘制有可能被省略\n    前端高手不用 left 做动画\n  用 transform（变形）\n代码\n  原理\ntransform: translateX(0 =\u0026gt; 300px)\n直接修改会被合成，需要等一会修改\ntransition 过渡属性可以自动脑补中间帧\n  注意性能\n并没有 relayout 以及 repaint（重新绘制）\n比改 left 性能好\n    2. 浏览器渲染原理   参考文章\n  Google 团队写的文章（右上角中文）\n渲染树构建、布局及绘制\n渲染性能\n使用 transform 来实现动画\n  查看 CSS 各属性触发什么\nCSSTriggers.com\n    浏览器渲染过程\n根据 HTML 构建 HTML 树（DOM）\n根据 CSS 构建 CSS 树（CSSOM）\n将两棵树合并成一颗渲染树（render tree）\nLayout 布局（文档流、盒模型、计算大小和位置）\nPaint 绘制（把边框颜色、文字颜色、阴影等画出来）\nComposite 合成（根据层叠关系展示画面）\n  如何更新样式\n  一般我们用 JS 来更新样式\n比如 div.style.background='red'\n比如 div.style.display='none'\n比如 div.classList.add=('red')\n比如 div.remove() 直接删掉节点\n  那么这些方法有什么不同吗\n有三种不同的渲染方式\n    三种更新方式\n  第一种，全走\ndiv.remove() 会触发当前消失，其他元素 relayout\n  第二种，跳过 layout\n改变背景颜色，直接 repaint + composite\n  第三种，跳过 layout 和 paint\n改变 transform，只需 composite\n注意必须全屏查看效果，在 iframe 里看有问题\n    CSS 动画优化\n  没什么技术含量\n答案都在Google 写的文章里，谁看完谁牛 X\n  JS 优化\n使用 requestAnimationFrame 代替 setTimeout 或 setInterval\n  CSS 优化\n使用 will-change 或 translate\n  没错\n完全就是死记硬背\n    3. transform   MDN 文档\n  四个常用功能\n位移 translate\n缩放 scale\n旋转 rotate\n倾斜 skew\n  经验\n一般都需要配合 transition 过渡\ninline 元素不支持 transform，需要先变成 block\n  transform 之 translate\n  常用写法\ntranslateX( \u0026lt;length-percentage\u0026gt; )\ntranslateY( \u0026lt;length-percentage\u0026gt; )\ntranslate( \u0026lt;length-percentage\u0026gt; , \u0026lt;length-percentage\u0026gt;? )\ntranslateZ( \u0026lt;length\u0026gt; ) 且父容器 perspective\ntranslate3d(x, y, z)\n示例\n  经验\n要学会看懂 MDN 的语法示例\ntranslate(-50%,-50%) 可做绝对定位元素的居中\n    transform 之 scale\n  常用写法\nscaleX( \u0026lt;number\u0026gt; )\nscaleY( \u0026lt;number\u0026gt; )\nscale( \u0026lt;number\u0026gt; , \u0026lt;number\u0026gt;? )\n示例\n  经验\n用的较少，因为容易出现模糊\n    transform 之 rotate\n  常用写法\nrotate( [ \u0026lt;angle\u0026gt; | \u0026lt;zero\u0026gt; ] )\nrotateZ( [ \u0026lt;angle\u0026gt; | \u0026lt;zero\u0026gt; ] )\nrotateX( [ \u0026lt;angle\u0026gt; | \u0026lt;zero\u0026gt; ] )\nrotateY( [ \u0026lt;angle\u0026gt; | \u0026lt;zero\u0026gt; ] )\nrotate3d 太复杂，无法用语言表述\n示例\n  经验\n一般用于 360 度旋转制作 loading\n用到时再搜索 rotate MDN 看文档\n    transform 之 skew\n  常用写法\nskewX( [ \u0026lt;angle\u0026gt; | \u0026lt;zero\u0026gt; ] )\nskewY( [ \u0026lt;angle\u0026gt; | \u0026lt;zero\u0026gt; ] )\nskew( [ \u0026lt;angle\u0026gt; | \u0026lt;zero\u0026gt; ] , [ \u0026lt;angle\u0026gt; | \u0026lt;zero\u0026gt; ]? )\n示例\n  经验\n用的较少\n用到时再搜 skew MDN 文档\n    transform 多重效果\n  组合使用\ntransform: scale(0.5) translate(-100%, -100%);\ntransform: none; 取消所有\n    4. transition   MDN 文档\n  作用\n补充中间帧\n  语法\ntransition: 属性名 时长 过渡方式 延迟\ntransition: left 200ms linear\n可以用逗号分隔两个不同属性\ntransition: left 200ms, top 400ms\n可以用 all 代表所有属性\ntransition: all 200ms\n过渡方式有：linear | ease | ease-in | ease-out | ease-in-out | cubic-bezier | step-start | step-end | steps，具体含义要靠数学知识\n  注意\n  并不是所有属性都能过渡\ndisplay: none =\u0026gt; block 没法过渡\n一般改成 visibility: hidden =\u0026gt; visible（没有为什么）\nbackground 颜色可以过渡吗？（可以）\nopacity 透明度可以过渡吗？（可以）\n  让一个盒子消失的三种过渡方案对比，均设置为transition: all 5s;\nA. 由 display: block 过渡为 display: none\n​\t结果：盒子会在第一秒就立即消失，没有过渡效果，消失后不占位置\nB. 由 visibility: visible 过渡为 visibility: hidden\n​\t结果：盒子会在最后一秒立即消失，没有过渡效果，消失后继续占位置\nC. 由 opacity: 1 过渡为 opacity: 0\n​\t结果：盒子会慢慢变透明最终消失，有过渡效果，消失后继续占位置\n    过渡必须要有起始，如果除了起始，还有中间点，怎么办？\n两种办法\n  使用两次 transform\n.a === transform ===\u0026gt; .b\n.b === transform ===\u0026gt; .c\n如何知道到了中间点呢？\n用 setTimeout 或者监听 transitionend 事件\n示例\n  使用 animation\n声明关键帧\n添加动画\n示例\n    5. animation   @keyframes 完整语法\n  标准写法\n搜索 keyframes MDN 讲的很清楚\n一种写法是 from to\n另一种写法是百分数\n    如何让动画停在最后一帧\n搜索 css animation stop at end\n网友给出的答案是加个 forwards\n示例\n  缩写语法\nanimation: 时长 | 过渡方式 | 延迟 | 次数 | 方向 | 填充模式 | 是否暂停 | 动画名；\n时长：1s 或者 1000ms\n过渡方式：跟 transition 取值一样，如 linear\n次数：3 或者 2.4 或者 infinite\n方向：reverse | alternate | alternate-reverse\n填充模式：none | forwards | backwards | both\n是否暂停：paused | running\n以上所有属性都有对应的单独属性\n  "
    }
,
    {
        "ref": "http://dongshuaizhi.top/blog/css%E5%AE%9A%E4%BD%8D/",
        "title": "CSS定位",
        "section": "blog",
        "tags": null,
        "date" : "2020.04.05",
        "body": "1. 盒模型 Q：背景的范围是从哪到哪？（B）\n A. border 内边沿围成的区域 B. border 外边沿围成的区域 如何验证自己的猜想？border 半透明试试  Q：从左边看一个 div，是什么样子？\n2. 新属性 - position   position\nstatic 默认值，待在文档流里\nrelative 相对定位，升起来，但不脱离文档流\nabsolute 绝对定位，定位基准是祖先里的非 static\nfixed 固定定位，定位基准是 viewport （有诈）\nsticky 粘滞定位，不好描述直接举例\n  经验\n如果你写了 absolute，一般都得补一个 relative\n如果你写了 absolute 或 fixed，一定要补 top 和 left\nsticky 兼容性很差，主要用于面试装逼\n  position: relative\n  使用场景\n用于做位移 （很少用）\n用于给 absolute 元素做爸爸（子绝父相）\n  配合 z-index\nz-index: auto 默认值，不创建新层叠上下文\nz-index: 0 / 1 / 2\nz-index: -1 / -2\n  经验\n写 z-index: 9999 的都是彩笔\n学会管理 z-index\n    position: absolute\n  使用场景\n脱离原来的位置，另起一层，比如对话框的关闭按钮\n鼠标提示\n  配合 z-index\n  经验\n很多彩笔都以为 absolute 是相对于 relative 定位的\n某些浏览器上如果不写 top / left 会位置错乱\n善用 left: 100%\n善用 left: 50%; 加负 margin\n    position: fixed\n  使用场景\n烦人的广告\n回到顶部按钮\n  配合 z-index\n  经验\n不要把 fixed 的元素放到有 transform 属性的元素的里面，会产生奇怪的反应\n手机上尽量不要用这个属性，坑很多\n不信你搜索一下【移动端 fixed】\n    3. 层叠上下文 Q：z-index: 10 和 z-index: 5 哪个高？ （D）\nA. 前者高 B. 后者高 C. 一样高 D. 看情况\n  比喻\n每个层叠上下文就是一个新的小世界（作用域）\n这个小世界里面的 z-index 跟外界无关\n处在同一个小世界里的 z-index 才能比较\n例子\n  哪些不正交的属性可以创建它\nMDN 文档有写\n需要记忆的有 z-index / fixed / flex / opacity / transform\n  负 z-index 与层叠上下文\n记住负 z-index 逃不出小世界\n  "
    }
,
    {
        "ref": "http://dongshuaizhi.top/blog/css%E5%B8%83%E5%B1%80/",
        "title": "CSS布局",
        "section": "blog",
        "tags": null,
        "date" : "2020.04.05",
        "body": "1. 布局分类   两种\n固定宽度布局，一般宽度为 960 / 1000 / 1024 px\n不固定宽度布局，主要靠文档流的原理来布局\n  还记得吗\n文档流本来就是自适应的，不需要加额外的样式\n  第三种布局\n响应式布局\n意思就是PC上固定宽度，手机上不固定宽度，也就是一种混合布局\n  2. float 布局   步骤\n子元素上加 float: left 和 width\n在父元素上加 .clearfix\n  经验\n有经验者会留一些空间或者最后一个不设 width\n不需要做响应式，因为手机上没有 IE ，而这个布局是专门为 IE 准备的\nIE 6/7 存在双倍 margin bug ，解决办法有两个\n 一是将错就错，针对 IE 6/7 把 margin 减半，_margin-left: 5px; 二是神来一笔，再加一个 display: inline-block    不同布局\n用 float 做两栏布局 （如顶部条）\n用 float 做三栏布局 （如内容区）\n用 float 做四栏布局 （如导航）\n用 float 做平均布局 （如产品展示区）\nQ：平均布局有一个典型的问题是需要消除每行最后一个 li 的 margin-right 的影响，假设结构是这样的：\n\u0026lt;div class=\u0026#34;w\u0026#34;\u0026gt;\r\u0026lt;ul class=\u0026#34;clearfix\u0026#34;\u0026gt;\r\u0026lt;li\u0026gt;\u0026lt;/li\u0026gt;\r\u0026lt;li\u0026gt;\u0026lt;/li\u0026gt;\r\u0026lt;li\u0026gt;\u0026lt;/li\u0026gt;\r\u0026lt;li\u0026gt;\u0026lt;/li\u0026gt;\r\u0026lt;li\u0026gt;\u0026lt;/li\u0026gt;\r\u0026lt;/ul\u0026gt;\r\u0026lt;/div\u0026gt;\r.w {\rwidth: 1200px;\r}\r.w ul li {\rfloat: left;\rwidth: 228px;\rheight: 270px;\rmargin-right: 15px;\r}\r那么解决方法有三种：\n  如果 ul 没有背景色，直接把 ul 宽度变宽\n.w ul {\rwidth: 1215px;\r}\r  运用 margin 负值\n.w ul {\rmargin-right: -15px;\r}\r  清除每一行的最后一个 li 的 margin-right\n.w ul li:nth-child(5n) {\rmargin-right: 0;\r}\r    3. flex 布局   教程\nflex布局\n  记住这些代码\ndisplay: flex\nflex-direction: row / column\nflex-wrap: wrap\njustify-content: center / space-between\nalign-items: center\n工作中基本只用这些\n  不同布局\n用 flex 做两栏布局\n用 flex 做三栏布局\n用 flex 做四栏布局\n用 flex 做平均布局\n用 flex 组合使用，做更复杂的布局\n代码\n  经验\n永远不要把 width 和 height 写死，除非特殊说明\n用 min-width / max-width / min-height / max-height\nflex 可以基本满足所有需求\nflex 和 margin-xxx: auto 配合有意外的效果\n  什么叫写死\n  写死\nwidth: 100px\n  不写死\nwidth: 50%\nmax-width: 100px\nwidth: 30vw\nmin-width: 80%\n特点：不使用 px，或者加 min max 前缀\n    如何在两套布局中切换\n主要使用 @media 媒体查询\n  4. Grid 布局   二维布局用 Grid\n一维布局用 Flex\n  教程\nGrid布局\n  布局\nGrid 尤其适合不规则布局\n代码\n  经验\n等到 Grid 普及了，前端对 CSS 的要求会进一步降低\n目前简单尝试一下 Grid 就可以了\n  "
    }
,
    {
        "ref": "http://dongshuaizhi.top/blog/css%E6%A6%82%E8%BF%B0/",
        "title": "CSS概述",
        "section": "blog",
        "tags": null,
        "date" : "2020.04.05",
        "body": "1. CSS层叠样式表，层叠指什么？   样式层叠\n可以多次对同一选择器进行样式声明\n  选择器层叠\n可以用不同选择器对同一个元素进行样式声明\n  文件层叠\n可以用多个文件进行层叠\n  这些特性使得CSS极度灵活\n这也为CSS后来被吐槽留下了隐患\n  2. 语法   语法一：样式语法\n选择器 {\r属性名: 属性值;\r/*注释*/\r}\r  语法二：at语法\n@charset \u0026#34;UTF-8\u0026#34;; /*声名字符编码*/\r@import url(2.css); /*导入一个额外的CSS文件*/\r@media (min-width: 100px) and (max-width: 200px) { /*媒体查询*/\r语法一\r}\r注意事项：\n @charset 必须放在第一行 前两个 at 语法必须以分号 ; 结尾 @media 语法后面填坑 charset 是字符集的意思，但 UTF-8 是字符编码encoding，这是历史遗留问题    3. 文档流 Normal Flow   文档流\n  流动方向\ninline 元素从左到右，到达最右边才会换行\nblock 元素从上到下，每一个都另起一行\ninline-block 也是从左到右，但是到达最后的时候不会把自己分成两块，不会跨两行\n  宽度\ninline 宽度为內部 inline 元素宽度的总和，不能用 width 指定\nblock 默认自动计算宽度，宽度默认值为 auto 而不是 100%，可用 width 指定，永远不要写 width: 100%\ninline-block 结合前两者特点，可用 width\n  高度\ninline 高度由 inline-height 间接确定，跟 height 、padding 无关\nblock 高度由内部文档流元素高度的总和决定，可以设 height\ninline-block 跟 block 类似，可以设置 height\ntip：当 block 里没有内容时，高度为0，但 inline 里没有内容时，高度为行高\n    overflow 溢出\n  当内容大于容器\nvisible\nhidden\nscroll\nauto\ntip：当容器有水平滚动条时，里面的 inline 元素（水平方向上）是默认只在第一屏里面显示，后面的留空，不会如上面所说到达最右边才会换行\n    4. 盒模型   请简述 CSS 盒模型是什么？\nCSS 盒模型分两种，一种是 content-box，一种是 border-box\n两者的区别是：content-box 的宽度只包含 content，border-box 的宽度包含了 border、paddding、content\n  margin 合并\n  哪些情况会合并\n兄弟 margin 合并\n父子 margin 合并（塌陷）\n  如何阻止合并\n兄弟合并是符合预期的\n兄弟合并可以用 inline-block 消除\n父子合并用 padding / border 挡住\n父子合并用 overflow: hidden 挡住\n父子合并用 display: flex\n    "
    }
,
    {
        "ref": "http://dongshuaizhi.top/blog/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/",
        "title": "HTML重点标签",
        "section": "blog",
        "tags": null,
        "date" : "2020.04.02",
        "body": "1. a 标签的用法   href\n取值：\n  网址\nhttps://google.com\nhttp://google.com\n//google.com 最高级，它会自动选择是用https还是http\n  路径\n/a/b/c 以及 a/b/c 注意绝对路径开头的/是指http-server的根目录，而不是指硬盘的根目录\nindex.html 以及 ./index.html\n  伪协议\njavascript:代码; 用法：当你想点击一个a链接什么都不做的话，就让href=\u0026quot;javascript:;\u0026quot;\n​ 那如果href=\u0026quot;\u0026quot;呢？结果是点击这个a链接页面会刷新\n​ 那如果href=\u0026quot;#\u0026quot;呢？结果是点击这个a链接页面会自动滚到顶部\nmailto:邮箱 会自动跳转到发邮件的界面，并自动填写mailto后面的邮箱\ntel:手机号 会自动跳转到拨号的界面，并自动填写tel后面的手机号\n  id\n#xxx 锚点链接，页面会跳转到指定的标签\n    target\n取值：\n（1）内置名字：\n _blank _self _top 如果有多级窗口，就在最顶级的窗口打开 _parent 如果有多级窗口，就在其父级窗口打开  （2）程序员命名：\n  window的name,比如xxx\n如果有一个叫xxx的窗口，就用它，如果没有呢，就创建一个窗口，把它叫作xxx\n  iframe的name\n    download\n下载页面。但不是所有浏览器都支持，尤其是手机浏览器不支持\n  rel=noopener\n为了防止一个bug，等学了JS后再回来填坑\n  2. iframe 标签 ​　内嵌窗口，页面可以通过iframe引用另一个页面，需要注意的是google是不允许别人用iframe指向它的。不过已经很少使用了，还有些老系统在用。\n3. table 标签的用法   简单的表格\n\u0026lt;table\u0026gt;\r\u0026lt;thead\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;th\u0026gt;英语\u0026lt;/th\u0026gt;\r\u0026lt;th\u0026gt;翻译\u0026lt;/th\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;/thead\u0026gt;\r\u0026lt;tbody\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;td\u0026gt;hyper\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;超级\u0026lt;/td\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;td\u0026gt;target\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;目标\u0026lt;/td\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;td\u0026gt;reference\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;引用\u0026lt;/td\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;/tbody\u0026gt;\r\u0026lt;tfoot\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;td\u0026gt;空\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;空\u0026lt;/td\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;/tfoot\u0026gt;\r\u0026lt;/table\u0026gt;\r  两个表头的表格\n\u0026lt;table\u0026gt;\r\u0026lt;thead\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;th\u0026gt;\u0026lt;/th\u0026gt;\r\u0026lt;th\u0026gt;小红\u0026lt;/th\u0026gt;\r\u0026lt;th\u0026gt;小明\u0026lt;/th\u0026gt;\r\u0026lt;th\u0026gt;小颖\u0026lt;/th\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;/thead\u0026gt;\r\u0026lt;tbody\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;th\u0026gt;数学\u0026lt;/th\u0026gt;\r\u0026lt;td\u0026gt;61\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;91\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;85\u0026lt;/td\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;th\u0026gt;语文\u0026lt;/th\u0026gt;\r\u0026lt;td\u0026gt;79\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;82\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;92\u0026lt;/td\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;th\u0026gt;英语\u0026lt;/th\u0026gt;\r\u0026lt;td\u0026gt;100\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;97\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;87\u0026lt;/td\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;/tbody\u0026gt;\r\u0026lt;tfoot\u0026gt;\r\u0026lt;tr\u0026gt;\r\u0026lt;th\u0026gt;总分\u0026lt;/th\u0026gt;\r\u0026lt;td\u0026gt;200\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;200\u0026lt;/td\u0026gt;\r\u0026lt;td\u0026gt;200\u0026lt;/td\u0026gt;\r\u0026lt;/tr\u0026gt;\r\u0026lt;/tfoot\u0026gt;\r\u0026lt;/table\u0026gt;\r  相关的样式\n  table-layout\nauto 表格及单元格的宽度取决于其包含的内容\nfixed 表格及单元格的宽度尽量平均\n  border-collapse\n  border-spacing\n    5. img 标签的用法   作用\n发出 get 请求，展示一张图片\n  属性\nalt / height / width / src\n  事件\nonload / onerror\n  响应式\nmax-width:100%\n  可替换元素\n  6. form 标签的用法   作用\n发 get 或 post 请求，然后刷新页面\n  属性\n action 控制请求哪个页面 method 控制请求方式是用GET还是POST autocomplete 控制是否自动填充，on/off target 和a链接的 target 用法相同，告诉浏览器我要提交到哪个页面，哪个页面需要刷新    事件\nonsubmit\nQ：\u0026lt;input type=\u0026quot;submit\u0026quot; value=\u0026quot;搞起\u0026quot; /\u0026gt;与\u0026lt;button type=\u0026quot;submit\u0026quot;\u0026gt;搞起\u0026lt;/button\u0026gt; 有什么区别？\nA：input里面不能再放其它标签，只能有纯文本，而button里面可以有任何标签\n  7.input 标签的用法   作用\n让用户输入内容\n  属性\n 类型 type: button / checkout / email / file / hidden / number / password / radio / search / submit / tel / text 其它: name / autofocus / checked / disabled / maxlength / pattern / value / palceholder    事件\nonchange / onfocus / onblur\n  验证器\nHTML5 新增功能\n  注意事项：一般不监听 input 的 click 事件\n  "
    }
,
    {
        "ref": "http://dongshuaizhi.top/blog/html%E6%A6%82%E8%BF%B0/",
        "title": "HTML概述",
        "section": "blog",
        "tags": null,
        "date" : "2020.04.02",
        "body": "1. HTML历史 HTML是在1990年左右诞生,由英国人Tim Berners-Lee发明，与此同时他还发明了HTTP和URL，与HTML共同组成了WWW（万维网）\n2. HTML起手应该写什么 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;!-- 声明文档类型为html --\u0026gt; \u0026lt;html lang=\u0026#34;zh-CN\u0026#34;\u0026gt; \u0026lt;!-- 声明语言为中文-中国 --\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;!-- 声明字符集为UTF-8 --\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;!-- 声明视口禁用缩放，以兼容手机 --\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;ie=edge\u0026#34;\u0026gt; \u0026lt;!-- 声明如果当前页面在IE浏览器里显示，IE请升级成最新的内核 --\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;!-- 页面标题 --\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 3. 常用的章节标签  标题 h1~h6 章节 section 文章 article 段落 p 头部 header 脚部 footer 主要内容 main 旁支内容 aside 划分 div  4. 全局属性   class——给标签分一个类\n  contenteditable——使任何一个元素可以被编辑\n  hidden——快速让一个东西看不见\n  id——给标签一个名字，这个名字有两个作用，其一在CSS中加#来添加样式，其二在JS中直接通过id获取到对应的元素\n通常我们的理解是：如果这个元素是全页面唯一的，就用id,如果不是全页面唯一的，就用class。其实这个理解是错误的，不到万不得已，千万不要用id，因为id重复了不会报错，并且id名是有忌讳的（打开控制台输入window.里面所列的所有单词都不能用，例如parent、top、self等，因为它们已经是window已经有的全局属性，你不可能通过一个标签把这个全局属性覆盖了，这里的不能用是指虽然可以起这个id名，但JS就没法通过id找到它）\n  style——给标签添加样式\n  tabindex——用来控制tab的顺序，可以取值-1,0,1,2,3\u0026hellip;，正整数表示按照从小到大顺序访问,0表示最后访问，-1表示别访问我\n  title——用来显示完整的内容\n  5. 常用的内容标签  ol+li ul+li dl+dt+dd pre——双标签，把需要保留空格、回车、以及tab缩进的内容包起来即可 code——内联元素，用来包裹代码块，默认样式为里面的字是等宽的，搭配pre使用效果更佳 hr br a em——语气上的强调很重要 strong——内容本身就很重要 q——内联引用，没有样式改变，只是有引用的语义 blockquote——块级引用  "
    }
,
    {
        "ref": "http://dongshuaizhi.top/blog/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/",
        "title": "如何用hugo搭建个人博客",
        "section": "blog",
        "tags": null,
        "date" : "2020.04.01",
        "body": "首先这是hugo官方教程，当然如果你不喜欢看英文的话，那就往下看我的教程吧\n  安装hugo  在https://github.com/gohugoio/hugo/releases里下载安装包并解压\n验证安装，显示版本号即安装成功\n$ hugo version   建立新网站　 将quickstar替换为你用于存放和上传博客的本地仓库的文件夹名称\n$ hugo new site quickstart   添加主题　 首先，从Github下载默认主题并将其添加到您网站的theme目录中\n$ cd quickstart $ git init $ git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke 然后，将主题添加到站点配置中\n$ echo 'theme = \u0026quot;ananke\u0026quot;' \u0026gt;\u0026gt; config.toml   开始写博客 首先创建一个新.md文件\n$ hugo new posts/my-first-post.md 新创建的文件会从以下内容开始\n--- $ title: \u0026quot;My First Post\u0026quot; $ date: 2019-03-26T08:47:11+01:00 $ draft: true --- 这里要注意写完博客后要把draft: true修改为draft: false，因为draft是草稿的意思\n  启动Hugo服务器 $ hugo server -D | EN +------------------+----+ Pages | 10 Paginator pages | 0 Non-page files | 0 Static files | 3 Processed images | 0 Aliases | 1 Sitemaps | 1 Cleaned | 0 Total in 11 ms Watching for changes in /Users/bep/quickstart/{content,data,layouts,static,themes} Watching for config changes in /Users/bep/quickstart/config.toml Environment: \u0026quot;development\u0026quot; Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop Ctrl+C即可进入预览页面http://localhost:1313/，在本地的md文档中随意编辑或添加新内容，只需在浏览器中刷新即可快速查看更改\n  自定义主题 对网站进行一些配置,在文本编辑器中打开config.toml\nbaseURL = \u0026quot;https://example.org/\u0026quot; languageCode = \u0026quot;en-us\u0026quot; title = \u0026quot;My New Hugo Site\u0026quot; theme = \u0026quot;ananke\u0026quot; 其中:\nlanguageCode = \u0026quot;zh-Hans\u0026quot; 网站语言设置为中文\ntitle和theme可以自行更改,更多主题请访问https://themes.gohugo.io/\n  建立静态页面 $ hugo -D 此时在quickstart下面会生成一个public文件夹,表示搭建成功\n  完结撒花 之后你就能通过git和Github完成个人博客的修改以及上传啦\n  "
    }
,
    {
        "ref": "http://dongshuaizhi.top/blog/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/",
        "title": "开博大吉",
        "section": "blog",
        "tags": null,
        "date" : "2020.04.01",
        "body": "大家好，我的博客开通啦！\n"
    }
]
